ggplot(datasaurus, aes(x=x, y=y, colors=dataset)) + geom_point()
#pour tout plotter sans avoir a filtter chaque dataset on peut utiliser facet
ggplot(datasaurus, aes(x=x, y=y, color=dataset)) + geom_point()
#pour tout plotter sans avoir a filtter chaque dataset on peut utiliser facet
ggplot(datasaurus, aes(x=x, y=y, color=dataset)) + geom_point() + facet_grid(.~dataset)
#pour plotter que 3 colonnes
ggplot(datasaurus, aes(x=x, y=y, color=dataset)) + geom_point() + facet_wrap(.~dataset, ncol=3)
?mean
x <- c(0:10, 50)
mean(x)
#pour plotter le mean de chaque dataset
mean(datasaurus$dataset)
#pour plotter le mean de chaque dataset
mean(datasaurus$x)
#pour grouper datasaurus par la colonne dataset
group_by(datasaurus, dataset)
#pour grouper datasaurus par la colonne dataset
goupedDT<-group_by(datasaurus, dataset)
View(goupedDT)
View(goupedDT)
View(goupedDT)
#pour calculer le mean dans chaque groupe
?summarise
#Summarise applique une fonctione de base comme mean a chaque groupe dans un grouped variable
summarise(goupedDT, avgX=mean(x))
summarise(goupedDT, avgX=mean(x), avgY=mean(y))
summarise(goupedDT, avgX=mean(x), avgY=mean(y), stdX=sd(x), stdY=sd(y))
summarytable<-summarise(goupedDT, avgX=mean(x), avgY=mean(y), stdX=sd(x), stdY=sd(y))
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()
#pour définier la scale
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()+scale_y_continuous(limits = c(0,55))
#pour définier la std
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()+scale_y_continuous(limits = c(0,55))+ geom_errorbar()
#pour définier la std
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()+scale_y_continuous(limits = c(0,55))+ geom_errorbar(aes(ymin=avgX-stdX, ymax=avgX+stdX))
)
#pour définier la std
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()+scale_y_continuous(limits = c(0,80))+ geom_errorbar(aes(ymin=avgX-stdX, ymax=avgX+stdX))
#pour définier la std
ggplot(summarytable, aes(x=dataset, y=avgX))+ geom_point()+scale_y_continuous(limits = c(0,80))+ geom_errorbar(aes(ymin=avgX-stdX, ymax=avgX+stdX), width=0.2)
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_jitter()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_jitter()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_boxplot()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset))+geom_violin() + geom_point()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)+theme_dark()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)+theme_minimal()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)+theme_bw()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)+theme_void()
ggplot(datasaurus, aes(x=dataset, y=y, color=dataset)) + geom_point()+geom_violin(alpha=0.5)+theme_linedraw()
library(tidyverse)
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq")
Function_MG1655 <- readxl::read_xlsx("sequenceMG1655.xlsx")
View(Function_MG1655)
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq/Comparaison des 2 analyses no ribo")
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq/Comparaison des 2 analyses no ribo")
Fulljoin_NB_Flu__NoNA_Func <- readxl::read_xlsx("Supp_TableS2.xlsx")
View(Fulljoin_NB_Flu__NoNA_Func)
Unique_Flu_Func <- readxl::read_xlsx("Supp_TableS4.xlsx")
Unique_NB_Func <- readxl::read_xlsx("Supp_TableS6.xlsx")
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq")
Function_MG1655 <- readxl::read_xlsx("sequenceMG1655.xlsx")
View(Function_MG1655)
Function_MG1655 <- readxl::read_xlsx("sequenceMG1655.xlsx")
View(Function_MG1655)
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq/Comparaison des 2 analyses no ribo")
Fulljoin_NB_Flu <- readxl::read_xlsx("Supp_TableS2.xlsx")
Unique_Flu <- readxl::read_xlsx("Supp_TableS4.xlsx")
Unique_NB <- readxl::read_xlsx("Supp_TableS6.xlsx")
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq")
Function_MG1655 <- readxl::read_xlsx("sequenceMG1655.xlsx")
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/RNA seq/Analyse RNA seq/Comparaison des 2 analyses no ribo")
Fulljoin_NB_Flu <- readxl::read_xlsx("Supp_TableS2.xlsx")
Unique_Flu <- readxl::read_xlsx("Supp_TableS4.xlsx")
Unique_NB <- readxl::read_xlsx("Supp_TableS6.xlsx")
Fulljoin_NB_Flu_Func <- full_join(Function_MG1655,Fulljoin_NB_Flu)
View(Fulljoin_NB_Flu_Func)
Fulljoin_NB_Flu_Func <- left_join(Function_MG1655,Fulljoin_NB_Flu)
View(Fulljoin_NB_Flu_Func)
Fulljoin_NB_Flu_Func <- right_join(Function_MG1655,Fulljoin_NB_Flu)
View(Fulljoin_NB_Flu_Func)
Dist_Fulljoin_NB_Flu_Func <- distinct(Fulljoin_NB_Flu_Func)
View(Dist_Fulljoin_NB_Flu_Func)
writexl::write_xlsx(Dist_Fulljoin_NB_Flu_Func,"-Fulljoin_NB_Flu_NoNA_Func")
Unique_Flu_Func <- right_join(Unique_Flu,Fulljoin_NB_Flu)
Unique_Flu_Func <- right_join(Function_MG1655,Unique_Flu)
Dist_Unique_Flu_Func <- distinct(Unique_Flu_Func)
writexl::write_xlsx(Dist_Unique_Flu_Func,"Unique_Flu_Func")
Unique_NB_Func <- right_join(Function_MG1655,Unique_NB)
Dist_Unique_NB_Func <- distinct(Unique_NB_Func)
writexl::write_xlsx(Dist_Unique_NB_Func,"Unique_NB_Func")
Dist_Fulljoin_NB_Flu_Func <- distinct(Fulljoin_NB_Flu_Func)
writexl::write_xlsx(Dist_Fulljoin_NB_Flu_Func,"Fulljoin_NB_Flu_NoNA_Func")
writexl::write_xlsx(Dist_Fulljoin_NB_Flu_Func,"Fulljoin_NB_Flu_NoNA_Func.xlsx")
writexl::write_xlsx(Dist_Unique_Flu_Func,"Unique_Flu_Func.xlsx")
writexl::write_xlsx(Dist_Unique_NB_Func,"Unique_NB_Func.xlsx")
#load library
library(tidyverse)
library(ggpubr)
theme_set(theme_bw())
# read in data
setwd("~/Documents/PROJET 2  Transcriptomique des agrégats/Resistance agrégats/Résistance aux AB des agrégats")
data <- readxl::read_xlsx("LacZ Survie Agrégats et Plancto vs amikacin.xlsx")%>%
filter(CMI!="T0") %>%
mutate(Strains=factor(Strains, levels=c("∆ag43","Ag43_off","Ag2/Nb3","PcLag43","Ag43_On","Ag2/Nb2"))) %>%
mutate(CMI=factor(CMI, levels =c("0","30","40","50","60"),
labels=c("0 x MIC","30","40","50","60")))
ggplot(data, aes(x= Strains, y = CFU, fill=Strains))+
geom_boxplot()+
geom_jitter()+
facet_grid(.~CMI)+
scale_y_log10()+
scale_fill_manual(values=c("blue","green","red","yellow","purple","coral"))+
stat_compare_means(label="p.signif", method="wilcox", hide.ns = TRUE,
comparisons = list(c("∆ag43", "PcLag43"), c("∆ag43","Ag2/Nb2"),c("∆ag43","Ag2/Nb3"), c("PcLag43","Ag2/Nb2"), c("∆ag43", "Ag43_off"),
c("∆ag43", "Ag43_On"), c("Ag43_off","Ag43_On" ), c("Ag43_On", "PcLag43"), c("Ag43_On","Ag2/Nb2" )))
#Add ref group
ggplot(data, aes(x= Strains, y = CFU, fill=Strains))+
geom_boxplot()+
geom_jitter()+
facet_grid(.~CMI)+
scale_y_log10()+
#scale_fill_manual(values=c("blue","green","red","yellow","purple","coral"))+
stat_compare_means(label="p.signif", method="wilcox", hide.ns = TRUE,
ref.group = c("∆ag43"))
#Rotate axis labels
ggplot(data, aes(x= Strains, y = CFU, fill=Strains, color=Strains))+
geom_boxplot(alpha=0.6, color="black")+
geom_point()+
facet_grid(.~CMI)+
scale_y_continuous(trans=pseudo_log_trans(base = 10),
breaks = c(0,100,10000,1000000,10000000, 100000000,1000000000),
labels = trans_format('log10', math_format(10^.x)))+
scale_color_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
scale_fill_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
stat_compare_means(label="p.signif", method="wilcox", hide.ns = TRUE,
ref.group = c("∆ag43")) +
theme(axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
strip.text = element_text(size=15),
axis.text = element_text(size=10),
legend.position = c(0.1,0.4))+
labs(y="CFU/mL")
library(scales)
library(scales)
#Rotate axis labels
ggplot(data, aes(x= Strains, y = CFU, fill=Strains, color=Strains))+
geom_boxplot(alpha=0.6, color="black")+
geom_point()+
facet_grid(.~CMI)+
scale_y_continuous(trans=pseudo_log_trans(base = 10),
breaks = c(0,100,10000,1000000,10000000, 100000000,1000000000),
labels = trans_format('log10', math_format(10^.x)))+
scale_color_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
scale_fill_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
stat_compare_means(label="p.signif", method="wilcox", hide.ns = TRUE,
ref.group = c("∆ag43")) +
theme(axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
strip.text = element_text(size=15),
axis.text = element_text(size=10),
legend.position = c(0.1,0.4))+
labs(y="CFU/mL")
setwd("~/Documents/Mes papiers/89-Aggregation-transcriptomic/Scripts_and_data")
#load library
library(tidyverse)
library(ggpubr)
library(scales)
theme_set(theme_bw())
library(ggpubr)
# read in data
data <- readxl::read_xlsx("Data/LacZ Survie Agrégats et Plancto vs amikacin.xlsx")%>%
filter(CMI!="T0") %>%
mutate(Strains=factor(Strains, levels=c("∆ag43","Ag43_off","Ag2/Nb3","PcLag43","Ag43_On","Ag2/Nb2"))) %>%
mutate(CMI=factor(CMI, levels =c("0","30","40","50","60"),
labels=c("0 x MIC","30","40","50","60")))
ggplot(data, aes(x= Strains, y = CFU, fill=Strains, color=Strains))+
geom_boxplot(alpha=0.6, color="black")+
geom_point()+
facet_grid(.~CMI)+
scale_y_continuous(trans=pseudo_log_trans(base = 10),
breaks = c(0,100,10000,1000000,10000000, 100000000,1000000000),
labels = trans_format('log10', math_format(10^.x)))+
scale_color_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
scale_fill_manual(values=c(`∆ag43`="blue",`Ag43_off`="green",
`Ag2/Nb3`= "red", PcLag43="dodgerblue",
`Ag43_On`="darkgreen", `Ag2/Nb2`="orange"))+
stat_compare_means(label="p.signif", method="wilcox", hide.ns = TRUE,
ref.group = c("∆ag43")) +
theme(axis.text.x = element_blank(),
axis.ticks.x=element_blank(),
strip.text = element_text(size=15),
axis.text = element_text(size=10),
legend.position = c(0.1,0.4))+
labs(y="CFU/mL")
#Save plot
ggsave("Figure_S1_LacZ_Graph_resistance_agregat_amikacin.png", device = "png", width = 10 , height = 5, dpi = 400)
library(tidyverse)
library(ggpubr)
library(scales)
theme_set(theme_bw())
sessionInfo()
setwd("~/Documents/Mes papiers/89-Aggregation-transcriptomic/Scripts_and_data/Scripts")
library(tidyverse)
library(ggpubr)
library(scales)
theme_set(theme_bw())
#Save plot
ggsave("../Figures/Figure_S1_LacZ_Graph_resistance_agregat_amikacin.png", device = "png", width = 10 , height = 5, dpi = 400)
data <- readxl::read_xlsx("../Data/LacZ Survie Agrégats et Plancto vs amikacin.xlsx")%>%
filter(CMI!="T0") %>%
mutate(Strains=factor(Strains, levels=c("∆ag43","Ag43_off","Ag2/Nb3","PcLag43","Ag43_On","Ag2/Nb2"))) %>%
mutate(CMI=factor(CMI, levels =c("0","30","40","50","60"),
labels=c("0 x MIC","30","40","50","60")))
library(tidyverse)
library(ggfortify)
library(tidyverse)
library(ggfortify)
pcadataraw_flu <- readxl::read_xlsx("../Data/Figure_2_counts_vst_norm_ag43.xlsx")
pcadataraw_NB <- readxl::read_xlsx("../Data/Figure_2_counts_vst_norm_NB.xlsx")
pcadatameta<- readxl::read_xlsx("../Data/Figure_2_PCA_Metadata.xlsx")
pcadataraw_Flu_NB <- full_join(pcadataraw_flu,pcadataraw_NB)
pcadata <- pcadataraw_Flu_NB %>%
select(-c(Gene_name,Gene_number))%>%
select(pcadatameta$Sample_Name) %>%
mutate_if(is.character, as.numeric) %>%
as.matrix()
rownames(pcadata) <- pcadataraw_Flu_NB$Gene_name
pcadatatranspose <- t(pcadata)
pca_result <- prcomp(pcadatatranspose)
theme_set(theme_bw())
autoplot(pca_result,size=6, data=pcadatameta,fill="Strain",shape="Aggregation",
#loadings=FALSE,loadings.label=TRUE, max.overlaps=500,
frame=TRUE,frame.colour = "Strain",level = 0.95,
loadings.label.repel=TRUE,loadings.label.size=3.5)+
#scale_shape_manual(values=c(`∆ag43`=21,`ag43_Off`=21,
#`Ag2_Nb3`=21, `Ag3_Nb2`= 21, PcLag43=22,
#`ag43_On`=22, `Ag2_Nb2`=22,`Ag3_Nb3`=22))+
scale_shape_manual(values = c(21,22))+
scale_fill_manual(values=c(`∆ag43`="blue",`ag43_Off`="green",
`Ag2_Nb3`="red", `Ag3_Nb2`= "darkgoldenrod", PcLag43="dodgerblue",
`ag43_On`="darkgreen", `Ag2_Nb2`="orange",`Ag3_Nb3`="darkred"))+
scale_color_manual(values=c(`∆ag43`="blue",`ag43_Off`="green",
`Ag2_Nb3`="red", `Ag3_Nb2`= "darkgoldenrod", PcLag43="dodgerblue",
`ag43_On`="darkgreen", `Ag2_Nb2`="orange",`Ag3_Nb3`="darkred"))+
guides( color=FALSE,
fill = guide_legend(
override.aes=list(shape = c(22,22,22,22,21,21,21,21))))
library(tidyverse)
library(ggfortify)
theme_set(theme_bw())
autoplot(pca_result,size=6, data=pcadatameta,fill="Strain",shape="Aggregation",
#loadings=FALSE,loadings.label=TRUE, max.overlaps=500,
frame=TRUE,frame.colour = "Strain",level = 0.95,
loadings.label.repel=TRUE,loadings.label.size=3.5)+
#scale_shape_manual(values=c(`∆ag43`=21,`ag43_Off`=21,
#`Ag2_Nb3`=21, `Ag3_Nb2`= 21, PcLag43=22,
#`ag43_On`=22, `Ag2_Nb2`=22,`Ag3_Nb3`=22))+
scale_shape_manual(values = c(21,22))+
scale_fill_manual(values=c(`∆ag43`="blue",`ag43_Off`="green",
`Ag2_Nb3`="red", `Ag3_Nb2`= "darkgoldenrod", PcLag43="dodgerblue",
`ag43_On`="darkgreen", `Ag2_Nb2`="orange",`Ag3_Nb3`="darkred"))+
scale_color_manual(values=c(`∆ag43`="blue",`ag43_Off`="green",
`Ag2_Nb3`="red", `Ag3_Nb2`= "darkgoldenrod", PcLag43="dodgerblue",
`ag43_On`="darkgreen", `Ag2_Nb2`="orange",`Ag3_Nb3`="darkred"))+
guides( color='none',
fill = guide_legend(
override.aes=list(shape = c(22,22,22,22,21,21,21,21))))
ggsave("../Figures/Figure_2_PCA.png", width = 6, height = 5)
metadata_Flu_NB <- data.frame(sets=c("Ag2Nb2vsAg2Nb3", "Ag2Nb2vsAg3Nb2", "Ag3Nb3vsAg2Nb3",
"Ag3Nb3vsAg3Nb2", "PcLvsDelta", "BleuevsDelta",
"BleuevsBlanche", "PcLvsBlanche"),
comparison=c("Ag2Nb2vsAg2Nb3", "Ag2Nb2vsAg3Nb2", "Ag3Nb3vsAg2Nb3",
"Ag3Nb3vsAg3Nb2", "PcLvsDelta", "BleuevsDelta",
"BleuevsBlanche", "PcLvsBlanche"))
genelistAg2Nb2vsAg2Nb3 <- Flu_NB_fulljoin %>% filter(!is.na(log2FoldChange_Ag2_Nb2vsAg2_Nb3))
genelistAg2Nb2vsAg3Nb2 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag2_Nb2vsAg3_Nb2))
genelistAg3Nb3vsAg2Nb3 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag3_Nb3vsAg2_Nb3))
genelistAg3Nb3vsAg3Nb2 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag3_Nb3vsAg3_Nb2))
genelistPcLvsDelta <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_DataPcLvsDelta))
genelistBleuevsDelta <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_BleuevsDelta))
genelistBleuevsBlanche <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_BleuevsBlanche))
genelistPcLvsBlanche <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_DataPcLvsBlanche))
listcomparisons_Flu_NB <- list(Ag2Nb2_vs_Ag2Nb3=genelistAg2Nb2vsAg2Nb3$Name,
Ag2Nb2_vs_Ag3Nb2=genelistAg2Nb2vsAg3Nb2$Name,
Ag3Nb3_vs_Ag2Nb3=genelistAg3Nb3vsAg2Nb3$Name,
Ag3Nb3_vs_Ag3Nb2=genelistAg3Nb3vsAg3Nb2$Name,
PcLFlu_vs_Delta_Flu=genelistPcLvsDelta$Name,
LacZ_Blue_vs_Delta_Flu=genelistBleuevsDelta$Name,
LacZ_Blue_vs_LacZ_White=genelistBleuevsBlanche$Name,
PcLFlu_vs_LacZ_White=genelistPcLvsBlanche$Name)
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="red", active = T),
#list(query = intersects, params = list("PcLvsDelta","PcLvsBlanche"),color="red", active = T),
#list(query = intersects, params = list("BleuevsDelta","BleuevsBlanche"),color="red", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg2Nb3","Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
#Venn diagram UpsetR
library(UpSetR)#devtools::install_github("hms-dbmi/UpSetR")
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="red", active = T),
#list(query = intersects, params = list("PcLvsDelta","PcLvsBlanche"),color="red", active = T),
#list(query = intersects, params = list("BleuevsDelta","BleuevsBlanche"),color="red", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg2Nb3","Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
upset(fromList(listcomparisons_Flu_NB), order.by = "freq")
upset(fromList(listcomparisons_Flu_NB), order.by = "freq")
upset(fromList(listcomparisons_Flu_NB), order.by = "freq")
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="red", active = T),
#list(query = intersects, params = list("PcLvsDelta","PcLvsBlanche"),color="red", active = T),
#list(query = intersects, params = list("BleuevsDelta","BleuevsBlanche"),color="red", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg2Nb3","Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
listcomparisons_Flu_NB <- list(Ag2Nb2_vs_Ag2Nb3=genelistAg2Nb2vsAg2Nb3$Name,
Ag2Nb2_vs_Ag3Nb2=genelistAg2Nb2vsAg3Nb2$Name,
Ag3Nb3_vs_Ag2Nb3=genelistAg3Nb3vsAg2Nb3$Name,
Ag3Nb3_vs_Ag3Nb2=genelistAg3Nb3vsAg3Nb2$Name,
PcLag43_vs_Delta_ag43=genelistPcLvsDelta$Name,
ag43_On_vs_Delta_ag43=genelistBleuevsDelta$Name,
ag43_On_vs_ag43_Off=genelistBleuevsBlanche$Name,
PcLag43_vs_ag43_Off=genelistPcLvsBlanche$Name)
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="red", active = T),
#list(query = intersects, params = list("PcLvsDelta","PcLvsBlanche"),color="red", active = T),
#list(query = intersects, params = list("BleuevsDelta","BleuevsBlanche"),color="red", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg2Nb3","Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLFlu_vs_Delta_Flu","LacZ_Blue_vs_Delta_Flu","LacZ_Blue_vs_LacZ_White","PcLFlu_vs_LacZ_White"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLag43_vs_Delta_ag43","ag43_On_vs_Delta_ag43","ag43_On_vs_ag43_Off","PcLag43_vs_ag43_Off"),color="red", active = T),
#list(query = intersects, params = list("PcLvsDelta","PcLvsBlanche"),color="red", active = T),
#list(query = intersects, params = list("BleuevsDelta","BleuevsBlanche"),color="red", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg2Nb3","Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
#list(query = intersects, params = list("Ag2Nb2vsAg3Nb2","Ag3Nb3vsAg3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLag43_vs_Delta_ag43","ag43_On_vs_Delta_ag43","ag43_On_vs_ag43_Off","PcLag43_vs_ag43_Off"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
library(tidyverse)
library(UpSetR)#devtools::install_github("hms-dbmi/UpSetR")
metadata_Flu_NB <- data.frame(sets=c("Ag2Nb2vsAg2Nb3", "Ag2Nb2vsAg3Nb2", "Ag3Nb3vsAg2Nb3",
"Ag3Nb3vsAg3Nb2", "PcLvsDelta", "BleuevsDelta",
"BleuevsBlanche", "PcLvsBlanche"),
comparison=c("Ag2Nb2vsAg2Nb3", "Ag2Nb2vsAg3Nb2", "Ag3Nb3vsAg2Nb3",
"Ag3Nb3vsAg3Nb2", "PcLvsDelta", "BleuevsDelta",
"BleuevsBlanche", "PcLvsBlanche"))
genelistAg2Nb2vsAg2Nb3 <- Flu_NB_fulljoin %>% filter(!is.na(log2FoldChange_Ag2_Nb2vsAg2_Nb3))
genelistAg2Nb2vsAg3Nb2 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag2_Nb2vsAg3_Nb2))
genelistAg3Nb3vsAg2Nb3 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag3_Nb3vsAg2_Nb3))
genelistAg3Nb3vsAg3Nb2 <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_Ag3_Nb3vsAg3_Nb2))
genelistPcLvsDelta <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_DataPcLvsDelta))
genelistBleuevsDelta <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_BleuevsDelta))
genelistBleuevsBlanche <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_BleuevsBlanche))
genelistPcLvsBlanche <- filter(Flu_NB_fulljoin, !is.na(log2FoldChange_DataPcLvsBlanche))
listcomparisons_Flu_NB <- list(Ag2Nb2_vs_Ag2Nb3=genelistAg2Nb2vsAg2Nb3$Name,
Ag2Nb2_vs_Ag3Nb2=genelistAg2Nb2vsAg3Nb2$Name,
Ag3Nb3_vs_Ag2Nb3=genelistAg3Nb3vsAg2Nb3$Name,
Ag3Nb3_vs_Ag3Nb2=genelistAg3Nb3vsAg3Nb2$Name,
PcLag43_vs_Delta_ag43=genelistPcLvsDelta$Name,
ag43_On_vs_Delta_ag43=genelistBleuevsDelta$Name,
ag43_On_vs_ag43_Off=genelistBleuevsBlanche$Name,
PcLag43_vs_ag43_Off=genelistPcLvsBlanche$Name)
upset(fromList(listcomparisons_Flu_NB), nsets = 8,
order.by = "freq",
queries = list(list(query = intersects, params = list("PcLag43_vs_Delta_ag43","ag43_On_vs_Delta_ag43","ag43_On_vs_ag43_Off","PcLag43_vs_ag43_Off"),color="red", active = T),
list(query = intersects, params = list("PcLag43_vs_Delta_ag43","PcLag43_vs_ag43_Off"),color="orange", active = T),
list(query = intersects, params = list("ag43_On_vs_Delta_ag43","ag43_On_vs_ag43_Off"),color="darkred", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2"),color="green", active = T),
list(query = intersects, params = list("Ag2Nb2_vs_Ag2Nb3","Ag2Nb2_vs_Ag3Nb2","Ag3Nb3_vs_Ag2Nb3","Ag3Nb3_vs_Ag3Nb2","PcLag43_vs_Delta_ag43","ag43_On_vs_Delta_ag43","ag43_On_vs_ag43_Off","PcLag43_vs_ag43_Off"),color="Blue", active = T)),
set.metadata = list(data = metadata_Flu_NB,
plots = list(list(type = "matrix_rows", column ="comparison",
colors = c(PcLvsDelta="navy", BleuevsDelta="navy",BleuevsBlanche="navy",PcLvsBlanche="navy",
Ag3Nb3vsAg3Nb2="yellow",Ag3Nb3vsAg2Nb3="yellow",Ag2Nb2vsAg3Nb2="yellow",Ag2Nb2vsAg2Nb3="yellow")))))
library(tidyverse)
ggplot(panther_enrich_all_GO, aes(x =Biological_process , y= fold_Enrichment, fill = Up_Down, order_by(fold_Enrichment)))+
geom_col(position = position_dodge())+
geom_text(aes(label=`Gene ontology IDs`, y=20), size=2)+
coord_flip() +
guides(x = guide_axis(n.dodge = 1))+
theme(axis.title=element_text(size=10,face="bold"),axis.text = element_text(size = 10),title=element_text(size=8,face="bold"),
legend.position = "none",
axis.text.x = element_text(lineheight = 1.2))+
ylab("Fold_enrichment") +  xlab("Pathway Names") +
facet_grid(Up_Down~., scales= "free_y", space = "free")
#Create GO ID
panther_enrich_up <- separate(panther_enrich_up, GO_biological_process_complete, sep = ", ", into = c("Biological_process","Gene ontology IDs"))
library(tidyverse)
panther_enrich_up <- readxl::read_xlsx("../Data/panther_common_genes_up.xlsx", sheet = "panther_common_genes_up")
panther_enrich_all_noGO <- readxl::read_xlsx("../Data/panther_enrich_up.xlsx", sheet = "up")
panther_enrich_down <- readxl::read_xlsx("../Data/panther_common_genes_up.xlsx", sheet = "panther_common_genes_down")
#Create GO ID
panther_enrich_up <- separate(panther_enrich_up, GO_biological_process_complete, sep = ", ", into = c("Biological_process","Gene ontology IDs"))
writexl::write_xlsx(panther_enrich_up,"panther_enrich_up.xlsx")
panther_enrich_down <- separate(panther_enrich_down, GO_biological_process_complete, sep = ", ", into = c("Biological_process","Gene ontology IDs"))
writexl::write_xlsx(panther_enrich_down,"panther_enrich_down.xlsx")
#Full join both sheet
panther_enrich_all <- full_join(panther_enrich_up,panther_enrich_down)
#Full join with Go table
panther_enrich_all_GO <- right_join(panther_enrich_all,panther_enrich_all_noGO) %>%
mutate(fold_Enrichment=as.numeric(fold_Enrichment)) %>%
mutate(#Biological_process = str_wrap(Biological_process, 50),
Biological_process= recode(Biological_process,"peptidyl-L-beta-methylthioaspartic acid biosynthetic process from peptidyl-aspartic acid"="peptidyl-L-beta-methylthioaspartic acid biosynthetic process"),
Biological_process = reorder(Biological_process, fold_Enrichment))
writexl::write_xlsx(panther_enrich_all_GO,"panther_enrich_all.xlsx")
ggplot(panther_enrich_all_GO, aes(x =Biological_process , y= fold_Enrichment, fill = Up_Down, order_by(fold_Enrichment)))+
geom_col(position = position_dodge())+
geom_text(aes(label=`Gene ontology IDs`, y=20), size=2)+
coord_flip() +
guides(x = guide_axis(n.dodge = 1))+
theme(axis.title=element_text(size=10,face="bold"),axis.text = element_text(size = 10),title=element_text(size=8,face="bold"),
legend.position = "none",
axis.text.x = element_text(lineheight = 1.2))+
ylab("Fold_enrichment") +  xlab("Pathway Names") +
facet_grid(Up_Down~., scales= "free_y", space = "free")
panther_enrich_Flu_up <- readxl::read_xlsx("../Data/panther_enrich_uniqueFlu_up.xlsx")
panther_enrich_Flu_down <- readxl::read_xlsx("../Data/panther_enrich_uniqueFlu_down.xlsx")
panther_enrich_UniqueFlu <- readxl::read_xlsx("../Data/panther_enrich_uniqueFlu.xlsx")
#Create GO ID
panther_enrich_Flu_up <- separate(panther_enrich_Flu_up, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
panther_enrich_Flu_down <- separate(panther_enrich_Flu_down, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
panther_enrich_NB_up <- separate(panther_enrich_NB_up, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
#Create GO ID
panther_enrich_Flu_up <- separate(panther_enrich_Flu_up, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
panther_enrich_Flu_down <- separate(panther_enrich_Flu_down, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
#Full join both sheet
panther_enrich_Flu_all <- full_join(panther_enrich_Flu_up,panther_enrich_Flu_down)
#FLu join with Go table
panther_enrich_Flu_all_GO <- panther_enrich_Flu_all %>%
mutate(Biological_process=str_trim(Biological_process)) %>%
right_join(panther_enrich_UniqueFlu) %>%
mutate(fold_Enrichment=as.numeric(fold_Enrichment)) %>%
mutate(Biological_process = reorder(Biological_process, fold_Enrichment))
writexl::write_xlsx(panther_enrich_Flu_all_GO,"panther_enrich_Flu_all.xlsx")
ggplot(panther_enrich_Flu_all_GO, aes(x =Biological_process , y= fold_Enrichment, fill = Up_Down, order_by(fold_Enrichment)))+
geom_col(position = position_dodge())+
geom_text(aes(label=`Gene ontology IDs`, y=20), size=2)+
coord_flip() +
guides(x = guide_axis(n.dodge = 1))+
theme(axis.title=element_text(size=10,face="bold"),axis.text = element_text(size = 10),title=element_text(size=8,face="bold"),
legend.position = "none",
axis.text.x = element_text(lineheight = 1.2))+
ylab("Fold_enrichment") +  xlab("Pathway Names") +
facet_grid(Up_Down~., scales= "free_y", space = "free")
panther_enrich_NB_up <- readxl::read_xlsx("panther_enrich_uniqueNB_up.xlsx")
panther_enrich_NB_up <- readxl::read_xlsx("../Data/panther_enrich_uniqueNB_up.xlsx")
panther_enrich_NB_down <- readxl::read_xlsx("../Data/panther_enrich_uniqueNB_down.xlsx")
panther_enrich_UniqueNB <- readxl::read_xlsx("../Data/panther_enrich_uniqueNB.xlsx")
#Create GO ID
panther_enrich_NB_up <- separate(panther_enrich_NB_up, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
panther_enrich_NB_down <- separate(panther_enrich_NB_down, Biological_process, sep = " ,", into = c("Biological_process","Gene ontology IDs"))
#Full join both sheet
panther_enrich_NB_all <- full_join(panther_enrich_NB_up,panther_enrich_NB_down)
#NB join with go table
panther_enrich_NB_all_GO <- panther_enrich_NB_all %>%
mutate(Biological_process=str_trim(Biological_process)) %>%
right_join(panther_enrich_UniqueNB) %>%
mutate(fold_Enrichment=as.numeric(fold_Enrichment)) %>%
mutate(Biological_process = reorder(Biological_process, fold_Enrichment))
writexl::write_xlsx(panther_enrich_NB_all_GO,"panther_enrich_NB_all.xlsx")
ggplot(panther_enrich_NB_all_GO, aes(x =Biological_process , y= fold_Enrichment, fill = Up_Down, order_by(fold_Enrichment)))+
geom_col(position = position_dodge())+
geom_text(aes(label=`Gene ontology IDs`, y=20), size=2)+
coord_flip() +
guides(x = guide_axis(n.dodge = 1))+
theme(axis.title=element_text(size=10,face="bold"),axis.text = element_text(size = 10),title=element_text(size=8,face="bold"),
legend.position = "none",
axis.text.x = element_text(lineheight = 1.2))+
ylab("Fold_enrichment") +  xlab("Pathway Names") +
facet_grid(Up_Down~., scales= "free_y", space = "free")
